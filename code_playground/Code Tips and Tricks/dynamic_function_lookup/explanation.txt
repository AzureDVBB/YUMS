################### Ranting #######################################################################

An easily extended way of adding more commands to a command processor.

This approach, albeit convoluted, offers massive extendability, blazing fast
membership testing and referencing of the handler class/functions.

The reasoning was that a super modular approach is necessary to avoid further
headaches later down the development cycle when more commands are added by
moving the membership testing and function/class registry outside of the modules
being written for the commands.

By utilizing Dictionaries, membership testing via their key can outperform an if..elif..else
ladder, which would be prohibitively large, and save the time necessary to code it in,
further avoiding errors introduced by that.

In addition, as shown in testing.py it is trivial to check if a recieved command is valid,
getting it's reference and then executing the command using a familiar interface.

Plus if there are a very large amount of commands, or there is a need for aliasing
then this would be overall more performant according to reading up on discussions on it.

But the sheer ease of use and modularity, with only a few lines needing to be written and kept
updated in the __init__.py of each added/updated modules pays for itself.

################################### actual explanation ############################################

We first create nested modules, the folder structure for these is as follows

lookup
    |
    func1
    |   |
    |   tests.py
    |   |
    |   __init__.py
    |
    func2
    |   |
    |   tests.py
    |   |
    |   __init__.py
    |
    __init__.py

The modules 'func1' and 'func2' are the written modules by the developers.
They will contain all necessary classes, functions and calls needed to perform their function,
execute commands sent to them by the users.

The 'func1' and 'func2' package MUST implement in their __init__.py, and by extension
all of the packages that developers write, a package-wide dictionary 'IMPLEMENTED'.
This holds all implemented commands as it's keys, making sure that they are all LOWER CASE only.
As their values they will hold the function/class references to the actual developed
functions and classes that will perform that actoin.

Caution must be taken to not have two packages use the same commands, as it is implemented that
importing lookup, while there are conflicting command names will cause an ImportError.
This behavior is preferred as the use of Dictionary.update() to progressively build up the
'IMPLEMENTED' dictionary of the 'lookup' module would mean that functions later in the
import list would start silently overriding allready existing references.

Finally in order to fully implement a module's function and class references, lookup/__init__.py
has a list 'PACKAGES' that needs to be updated with the package references.

########################################################################### summary ###############

Write all your logic in a subpackage of lookup.

Make a nice Dictionary of class/function references (MAKE SURE ALL DICTIONARY KEYS ARE LOWER CASE)
in subpackage/__init__.py called 'IMPLEMENTED'.

Update lookup/__init__.py list called 'PACKAGES' with the implemented package reference.

????

Profit?

You can now use 'command' in lookup.IMPLEMENTED.keys() to quickly check if command is valid.
You can now use lookup.IMPLEMENTED['command'] to grab the reference to the command handler.